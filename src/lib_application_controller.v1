%%%-------------------------------------------------------------------
%%% @author c50 <joq62@c50>
%%% @copyright (C) 2024, c50
%%% @doc
%%%
%%% @end
%%% Created : 11 Jan 2024 by c50 <joq62@c50>
%%%-------------------------------------------------------------------
-module(lib_application_controller).
  

 
  
%% API
-export([
	 load/2,
	 start/2,
	 stop/2,
	 unload/2
	]).

-export([

	]).

%%%===================================================================
%%% API
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc
%% Workers nodename convention Id_UniqueNum_cookie 
%% UniqueNum=integer_to_list(erlang:system_time(microsecond),36)
%% @end
%%--------------------------------------------------------------------
load(ApplicationId,WorkerNode)->

    glurk.

%%--------------------------------------------------------------------
%% @doc
%% Workers nodename convention Id_UniqueNum_cookie 
%% UniqueNum=integer_to_list(erlang:system_time(microsecond),36)
%% @end
%%--------------------------------------------------------------------
start(ApplicationId,WorkerNode)->

    glurk.
%%--------------------------------------------------------------------
%% @doc
%% Workers nodename convention Id_UniqueNum_cookie 
%% UniqueNum=integer_to_list(erlang:system_time(microsecond),36)
%% @end
%%--------------------------------------------------------------------
stop(ApplicationId,WorkerNode)->

    glurk.

%%--------------------------------------------------------------------
%% @doc
%% Workers nodename convention Id_UniqueNum_cookie 
%% UniqueNum=integer_to_list(erlang:system_time(microsecond),36)
%% @end
%%--------------------------------------------------------------------
unload(ApplicationId,WorkerNode)->

    glurk.

%%--------------------------------------------------------------------
%% @doc
%% Workers nodename convention ApplicationId_UniqueNum_cookie 
%% UniqueNum=erlang:system_time(microsecond)
%% @end
%%--------------------------------------------------------------------
delete_worker(Node,WorkerInfoList)->
    WorkerInfo=[WI||WI<-WorkerInfoList,
		    Node==maps:get(node,WI)],
    Result=case WorkerInfo of
	       []->
		   {error,["Worker info for Node doesnt exists ",Node]};
	       [Map]->
		   erlang:monitor_node(Node,false),
		   slave:stop(Node),
		   {ok,Map}
	   end,
    {ok,Result}.
    

%%%===================================================================
%%% Internal functions
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc
%% 
%% @end
%%--------------------------------------------------------------------
